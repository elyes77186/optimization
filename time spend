import matplotlib.pyplot as plt
import time
import itertools

# Naive implementation of the Traveling Salesman Problem
def tsp_naive(graph, start):
    n = len(graph)
    vertices = [i for i in range(n) if i != start]
    min_cost = float('inf')
    min_path = None

    for perm in itertools.permutations(vertices):
        path = [start] + list(perm) + [start]
        cost = 0
        for i in range(n):
            cost += graph[path[i]][path[i+1]]
        if cost < min_cost:
            min_cost = cost
            min_path = path
    return min_path, min_cost

# Backtracking and recursive approach to solve the Subset Sum Problem
def subset_sum_recursive(nums, target, index, subset):
    if target == 0:
        return True
    if target < 0 or index >= len(nums):
        return False

    # Include the current element in the subset
    subset.append(nums[index])
    if subset_sum_recursive(nums, target - nums[index], index + 1, subset):
        return True

    # Exclude the current element from the subset
    subset.pop()
    if subset_sum_recursive(nums, target, index + 1, subset):
        return True

    return False

def subset_sum(nums, target):
    subset = []
    return subset_sum_recursive(nums, target, 0, subset)

# Function to measure the time taken for different input sizes
def measure_time(func, *args):
    start_time = time.time()
    func(*args)
    return time.time() - start_time

# Create lists to store input sizes and corresponding time taken
input_sizes = []
tsp_times = []
subset_sum_times = []

# Varying input sizes
for n in range(1, 10):
    input_sizes.append(n)

    # Generate a simple graph for TSP with random weights
    graph = [[0] * n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if i != j:
                graph[i][j] = 1

    # Measure time for TSP
    tsp_time = measure_time(tsp_naive, graph, 0)
    tsp_times.append(tsp_time)

    # Generate a list of integers for Subset Sum
    integers = list(range(1, n+1))

    # Measure time for Subset Sum
    subset_sum_time = measure_time(subset_sum, integers, n*(n+1)//2)
    subset_sum_times.append(subset_sum_time)

# Plotting the results
plt.plot(input_sizes, tsp_times, label="TSP Naive")
plt.plot(input_sizes, subset_sum_times, label="Subset Sum Recursive")
plt.xlabel("Number of Cities (TSP) or Integers (Subset Sum)")
plt.ylabel("Time (seconds)")
plt.title("Time Complexity Analysis")
plt.legend()
plt.show()
